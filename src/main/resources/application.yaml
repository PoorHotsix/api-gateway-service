server:
  port: 25000

spring:
  application:
    name: api-gateway-server
  main:
    web-application-type: reactive

  cloud:
    gateway:    # Spring Cloud Gateway를 활용한 API Gateway Server 구성
      discovery:
        locator:
          enabled: true # Eureka에 등록된 서비스 이름 기반으로 라우팅 가능
      routes:
        - id: member-service
          uri: lb://member-service
          predicates:
            - Path=/api/v1/members/**
          filters:
            - TokenRelay

        - id: review-service
          uri: lb://review-service
          predicates:
            - Path=/api/v1/reviews/**
          filters:
            - TokenRelay

        - id: product-service
          uri: lb://product-service
          predicates:
            - Path=/api/v1/products/**
          filters:
            - TokenRelay

        - id: product-service2
          uri: lb://product-service
          predicates:
            - Path=/api/v1/categories/**
          filters:
            - TokenRelay

        - id: order-service
          uri: lb://order-service
          predicates:
            - Path=/api/v1/orders/**
          filters:
            - TokenRelay

        - id: stats-service
          uri: lb://stats-service
          predicates:
            - Path=/api/v1/stats/**
          filters:
            - TokenRelay
      
       
      # Spring Cloud Gateway에서 CORS(Cross-Origin Resource Sharing)를 전역(Global)으로 설정
      globalcors:
        corsConfigurations:
          '[/**]':  # 모든 요청 경로에 대해 적용
            #allowedOrigins: "*"  # 모든 도메인 허용 (개발 환경에서만 권장)
            allowed-origin-patterns:
              - "http://localhost:3000"
              - "http://localhost:5173"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders:
              - "*"
            allowCredentials: true

  #-----------------------------------------------------------------------
  # Quarkus 기반 Keycloak-Server 을 이용한 인증 처리
  # issuer-uri : 토큰을 발급한 주체(issuer)
  # jwk-set-uri : Keycloak이 사용하는 공개 키 목록을 제공하는 주소로, Spring Security는 이 경로에서 JWT 서명을 검증하기 위한 공개키를 받아온다.
  # curl -i http://localhost:8080/realms/react-app/.well-known/openid-configuration
  #-----------------------------------------------------------------------
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/inkcloud
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs
          # jwk-set-uri: http://keycloak:8080/realms/test-realm/protocol/openid-connect/certs

logging:  
  level:
    org.springframework.security: DEBUG
    org.springframework.cloud.gateway: DEBUG
    root: INFO
    "[com.inkcloud.api_gateway_server]": DEBUG


#-------------------------------------------------------------------------------
# Eureka-Server 에 자가 등록 설정
#-------------------------------------------------------------------------------

eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.cloud.client.hostname}:${server.port}
    prefer-ip-address: true   # Eureka 클라이언트가 자신을 등록할 때, 호스트 이름 대신 IP 주소를 사용하여 서비스 레지스리에 등록한다.
  client:  
    register-with-eureka: true  
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
